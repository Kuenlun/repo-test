name: Python package

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read # Principle of least privilege for GITHUB_TOKEN

concurrency:
  # Cancel previous runs on the same branch to avoid duplicate jobs
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast-fail on formatting/lint to stop early if code quality is poor
  quality-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip ruff pytest pytest-cov
          python -m pip install -e .

      - name: Lint with Ruff
        run: ruff check .

      - name: Check formatting with Ruff
        run: ruff format --check .

      - name: Check 100% test coverage
        run: |
          pytest --cov=main --cov-report=term --cov-fail-under=100
          echo "‚úÖ 100% code coverage achieved"

      - name: CI summary
        if: success()
        run: echo "### Formatting and lint checks passed ‚úÖ" >> "$GITHUB_STEP_SUMMARY"

  # Full test matrix - only runs if quality checks pass
  build:
    needs: quality-checks
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          python -m pip install -e .

      - name: Test with pytest
        run: pytest

  # To ensure ALL jobs passed - Required for branch protection
  merge-gate:
    name: Merge Gate
    runs-on: ubuntu-latest
    needs: [quality-checks, build]
    if: always() # Run even if some jobs fail
    steps:
      - name: Check all job statuses
        run: |
          echo "Checking status of all jobs..."
          echo "Job statuses:"
          echo "  quality-checks: ${{ needs.quality-checks.result }}"
          echo "  build: ${{ needs.build.result }}"

          # Check each job explicitly
          if [ "${{ needs.quality-checks.result }}" != "success" ]; then
            echo "‚ùå Quality checks failed"
            exit 1
          fi

          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå Build job failed"
            exit 1
          fi

          echo "‚úÖ All jobs passed successfully"

      - name: Report success
        if: success()
        run: |
          echo "üéâ All checks passed! Ready to merge."
