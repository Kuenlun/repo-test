name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate-pr-description:
    if: ${{ !github.event.pull_request.draft }} # skip drafts
    runs-on: ubuntu-latest
    steps:
      - name: Check PR description has content
        uses: actions/github-script@v7
        with:
          script: |
            const body = (context.payload.pull_request.body || '').replace(/\r\n/g, '\n');
            const withoutComments = body.replace(/<!--[\s\S]*?-->/g, '');
            const sectionNames = ['Added','Removed','Changed','Fixed'];
            const headerRe = new RegExp(`^###\\s+(?:${sectionNames.join('|')})\\s*$`, 'gim');

            const headers = [];
            let m;
            while ((m = headerRe.exec(withoutComments)) !== null) {
              headers.push({ name: m[0].trim().slice(4).trim(), index: m.index });
            }

            if (headers.length === 0) {
              core.setFailed('PR description must contain at least one of the sections: ### Added, ### Removed, ### Changed, or ### Fixed.');
              return;
            }

            const blocks = headers.map((h, i) => {
              const start = h.index;
              const end = i + 1 < headers.length ? headers[i + 1].index : withoutComments.length;
              const text = withoutComments.slice(start, end);
              const lines = text.split('\n').slice(1).map(l => l.trim());
              let inCodeBlock = false;
              const meaningful = lines.filter(l => {
                if (/^```/.test(l)) {
                  inCodeBlock = !inCodeBlock;
                  return false;
                }
                if (inCodeBlock) return false;
                if (!l) return false;
                if (/^[-*]\s*$/.test(l)) return false;
                if (/^[-*]\s*\[\s?\]\s*$/.test(l)) return false;
                if (/^\d+\.\s*$/.test(l)) return false;
                return /^[-*]\s+.+/.test(l) || /^\d+\.\s+.+/.test(l);
              });
              return { name: h.name, hasContent: meaningful.length > 0 };
            });

            const filled = blocks.some(b => b.hasContent);
            if (!filled) {
              await core.summary
                .addHeading('PR Validation')
                .addRaw('No content found in the required sections.\n\n')
                .addList(blocks.map(b => `${b.name}: ${b.hasContent ? 'OK' : 'Empty'}`))
                .write();
              core.setFailed('PR description must include at least one non-empty item under ### Added, ### Removed, ### Changed, or ### Fixed.');
            } else {
              await core.summary
                .addHeading('PR Validation')
                .addRaw('At least one section contains content.\n')
                .addList(blocks.map(b => `${b.name}: ${b.hasContent ? 'OK' : 'Empty'}`))
                .write();
              console.log('PR has valid content in at least one of the required sections.');
            }
